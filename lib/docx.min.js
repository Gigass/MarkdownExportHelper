// 简化版docx库 - 专门用于Markdown转Word
(function(window) {
  'use strict';
  
  // 基础类
  class TextRun {
    constructor(options = {}) {
      this.text = options.text || '';
      this.size = options.size || 24;
      this.font = options.font || 'Calibri';
      this.bold = options.bold || false;
      this.italic = options.italic || false;
    }
  }
  
  class Paragraph {
    constructor(options = {}) {
      this.children = options.children || [];
      this.text = options.text || '';
      this.heading = options.heading || null;
      this.spacing = options.spacing || {};
      this.alignment = options.alignment || 'left';
    }
  }
  
  class Document {
    constructor(options = {}) {
      this.sections = options.sections || [];
    }
  }
  
  class Packer {
    static async toBlob(doc) {
      // 创建Word文档的XML结构
      const xml = generateWordXML(doc);
      const blob = new Blob([xml], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
      return blob;
    }
  }
  
  // 生成Word文档的XML
  function generateWordXML(doc) {
    const sections = doc.sections || [];
    const paragraphs = [];
    
    sections.forEach(section => {
      if (section.children) {
        section.children.forEach(child => {
          if (child instanceof Paragraph) {
            paragraphs.push(child);
          }
        });
      }
    });
    
    let xml = `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>`;
    
    paragraphs.forEach(para => {
      xml += generateParagraphXML(para);
    });
    
    xml += `
  </w:body>
</w:document>`;
    
    return xml;
  }
  
  function generateParagraphXML(para) {
    let xml = '<w:p>';
    
    // 添加段落属性
    if (para.heading) {
      xml += `<w:pPr><w:pStyle w:val="${para.heading}"/></w:pPr>`;
    }
    
    // 添加间距
    if (para.spacing.before || para.spacing.after) {
      xml += '<w:pPr><w:spacing';
      if (para.spacing.before) xml += ` w:before="${para.spacing.before}"`;
      if (para.spacing.after) xml += ` w:after="${para.spacing.after}"`;
      xml += '/></w:pPr>';
    }
    
    // 添加文本
    if (para.text) {
      xml += `<w:r><w:t>${escapeXML(para.text)}</w:t></w:r>`;
    } else if (para.children && para.children.length > 0) {
      para.children.forEach(child => {
        if (child instanceof TextRun) {
          xml += generateTextRunXML(child);
        }
      });
    }
    
    xml += '</w:p>';
    return xml;
  }
  
  function generateTextRunXML(textRun) {
    let xml = '<w:r>';
    
    // 添加文本运行属性
    xml += '<w:rPr>';
    if (textRun.bold) xml += '<w:b/>';
    if (textRun.italic) xml += '<w:i/>';
    if (textRun.size) xml += `<w:sz w:val="${textRun.size}"/>`;
    if (textRun.font) xml += `<w:rFonts w:ascii="${textRun.font}" w:hAnsi="${textRun.font}"/>`;
    xml += '</w:rPr>';
    
    xml += `<w:t>${escapeXML(textRun.text)}</w:t>`;
    xml += '</w:r>';
    return xml;
  }
  
  function escapeXML(text) {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }
  
  // 导出到全局
  window.docx = {
    Document,
    Packer,
    Paragraph,
    TextRun,
    HeadingLevel: {
      HEADING_1: 'Heading1',
      HEADING_2: 'Heading2',
      HEADING_3: 'Heading3',
      HEADING_4: 'Heading4',
      HEADING_5: 'Heading5',
      HEADING_6: 'Heading6'
    },
    AlignmentType: {
      LEFT: 'left',
      CENTER: 'center',
      RIGHT: 'right',
      JUSTIFIED: 'justified'
    }
  };
  
})(window); 